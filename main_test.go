package main

import (
	"testing"
)


func TestKnightMove(t *testing.T)  {
	var knightBoard uint64
	for i := 0; i < 64; i++ {
		t.Logf("index inside loop: %d", i)
		
		knightBoard = 0
		knightBoard |= 1 << (63 - i)

		gotMove := GenerateKnightMove(knightBoard);

		expectedMove := getExpectedKnightMove(i);

		if gotMove != expectedMove {
			t.Logf("index: %d", i)
			t.Errorf("got:\n %064b want:\n %064b", gotMove, expectedMove)
		}

	}
	
}

func getExpectedKnightMove(pos int) uint64 {
	knightMoveMap := map[int]uint64{
		0:0b00000000_00100000_01000000_00000000_00000000_00000000_00000000_00000000,
		1:0b00000000_00010000_10100000_00000000_00000000_00000000_00000000_00000000,
		2:0b00000000_10001000_01010000_00000000_00000000_00000000_00000000_00000000,
		3:0b00000000_01000100_00101000_00000000_00000000_00000000_00000000_00000000,
		4:0b00000000_00100010_00010100_00000000_00000000_00000000_00000000_00000000,
		5:0b00000000_00010001_00001010_00000000_00000000_00000000_00000000_00000000,
		6:0b00000000_00001000_00000101_00000000_00000000_00000000_00000000_00000000,
		7:0b00000000_00000100_00000010_00000000_00000000_00000000_00000000_00000000,
		8:0b00100000_00000000_00100000_01000000_00000000_00000000_00000000_00000000,
		9:0b00010000_00000000_00010000_10100000_00000000_00000000_00000000_00000000,
		10:0b10001000_00000000_10001000_01010000_00000000_00000000_00000000_00000000,
		11:0b01000100_00000000_01000100_00101000_00000000_00000000_00000000_00000000,
		12:0b00100010_00000000_00100010_00010100_00000000_00000000_00000000_00000000,
		13:0b00010001_00000000_00010001_00001010_00000000_00000000_00000000_00000000,
		14:0b00001000_00000000_00001000_00000101_00000000_00000000_00000000_00000000,
		15:0b00000100_00000000_00000100_00000010_00000000_00000000_00000000_00000000,
		16:0b01000000_00100000_00000000_00100000_01000000_00000000_00000000_00000000,
		17:0b10100000_00010000_00000000_00010000_10100000_00000000_00000000_00000000,
		18:0b01010000_10001000_00000000_10001000_01010000_00000000_00000000_00000000,
		19:0b00101000_01000100_00000000_01000100_00101000_00000000_00000000_00000000,
		20:0b00010100_00100010_00000000_00100010_00010100_00000000_00000000_00000000,
		21:0b00001010_00010001_00000000_00010001_00001010_00000000_00000000_00000000,
		22:0b00000101_00001000_00000000_00001000_00000101_00000000_00000000_00000000,
		23:0b00000010_00000100_00000000_00000100_00000010_00000000_00000000_00000000,
		24:0b00000000_01000000_00100000_00000000_00100000_01000000_00000000_00000000,
		25:0b00000000_10100000_00010000_00000000_00010000_10100000_00000000_00000000,
		26:0b00000000_01010000_10001000_00000000_10001000_01010000_00000000_00000000,
		27:0b00000000_00101000_01000100_00000000_01000100_00101000_00000000_00000000,
		28:0b00000000_00010100_00100010_00000000_00100010_00010100_00000000_00000000,
		29:0b00000000_00001010_00010001_00000000_00010001_00001010_00000000_00000000,
		30:0b00000000_00000101_00001000_00000000_00001000_00000101_00000000_00000000,
		31:0b00000000_00000010_00000100_00000000_00000100_00000010_00000000_00000000,
		32:0b00000000_00000000_01000000_00100000_00000000_00100000_01000000_00000000,
		33:0b00000000_00000000_10100000_00010000_00000000_00010000_10100000_00000000,
		34:0b00000000_00000000_01010000_10001000_00000000_10001000_01010000_00000000,
		35:0b00000000_00000000_00101000_01000100_00000000_01000100_00101000_00000000,
		36:0b00000000_00000000_00010100_00100010_00000000_00100010_00010100_00000000,
		37:0b00000000_00000000_00001010_00010001_00000000_00010001_00001010_00000000,
		38:0b00000000_00000000_00000101_00001000_00000000_00001000_00000101_00000000,
		39:0b00000000_00000000_00000010_00000100_00000000_00000100_00000010_00000000,
		40:0b00000000_00000000_00000000_01000000_00100000_00000000_00100000_01000000,
		41:0b00000000_00000000_00000000_10100000_00010000_00000000_00010000_10100000,
		42:0b00000000_00000000_00000000_01010000_10001000_00000000_10001000_01010000,
		43:0b00000000_00000000_00000000_00101000_01000100_00000000_01000100_00101000,
		44:0b00000000_00000000_00000000_00010100_00100010_00000000_00100010_00010100,
		45:0b00000000_00000000_00000000_00001010_00010001_00000000_00010001_00001010,
		46:0b00000000_00000000_00000000_00000101_00001000_00000000_00001000_00000101,
		47:0b00000000_00000000_00000000_00000010_00000100_00000000_00000100_00000010,
		48:0b00000000_00000000_00000000_00000000_01000000_00100000_00000000_00100000,
		49:0b00000000_00000000_00000000_00000000_10100000_00010000_00000000_00010000,
		50:0b00000000_00000000_00000000_00000000_01010000_10001000_00000000_10001000,
		51:0b00000000_00000000_00000000_00000000_00101000_01000100_00000000_01000100,
		52:0b00000000_00000000_00000000_00000000_00010100_00100010_00000000_00100010,
		53:0b00000000_00000000_00000000_00000000_00001010_00010001_00000000_00010001, 
		54:0b00000000_00000000_00000000_00000000_00000101_00001000_00000000_00001000, 
		55:0b00000000_00000000_00000000_00000000_00000010_00000100_00000000_00000100, 
		56:0b00000000_00000000_00000000_00000000_00000000_01000000_00100000_00000000, 
		57:0b00000000_00000000_00000000_00000000_00000000_10100000_00010000_00000000, 
		58:0b00000000_00000000_00000000_00000000_00000000_01010000_10001000_00000000, 
		59:0b00000000_00000000_00000000_00000000_00000000_00101000_01000100_00000000, 
		60:0b00000000_00000000_00000000_00000000_00000000_00010100_00100010_00000000, 
		61:0b00000000_00000000_00000000_00000000_00000000_00001010_00010001_00000000, 
		62:0b00000000_00000000_00000000_00000000_00000000_00000101_00001000_00000000, 
		63:0b00000000_00000000_00000000_00000000_00000000_00000010_00000100_00000000, 

	}
	return knightMoveMap[pos]

}